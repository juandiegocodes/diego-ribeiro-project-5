{"version":3,"sources":["components/firebase.js","components/Header.js","components/Gameover.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","props","className","htmlFor","name","type","id","value","tracking","onChange","trackingChanges","placeholder","onClick","startClicked","instructionsClicked","Gameover","userInput","bbla","playAgainButton","leaderboard","map","key","Instructions","exitInstructions","App","newDeck","axios","method","url","responseType","params","deck_count","then","res","setState","deckId","data","deck_id","initialDealer","initialUser","catch","alert","count","dealerCard1","cards","pushDealerUrl","image","parseInt","dealerFilterCard","dealerdeckValue","userCard1","userCard2","pushUserUrl","userFilterCard","userdeckValue","state","stay","dealerAceCounter","userAceCounter","newpush","userHandUrls","push","dealerHandUrls","userRequestCard","checkuser","dealerRequestCard","gameEnd","checkdealer","bank","amountToBet","dealerWon","userWon","tie","startButton","gameStart","bet","startTimer","timerOn","timer","gameisOver","gameOver","setInterval","nextGame","inputChange","event","target","updateInputValue","evt","dbRef","database","ref","userFb","on","response","newFbState","val","item","topTenArray","sort","a","b","slice","playAgain","userScore","houseScore","totalScore","startBet","placeBet","instructionsButton","instructions","backInstructionsButton","this","min","max","step","inputValue","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c5c37dc.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst config = {\n    apiKey: \"AIzaSyB7a0KxGkiPKfJmFCe5rqGo8gr4BDu5lbk\",\n    authDomain: \"speed21-e8e5e.firebaseapp.com\",\n    databaseURL: \"https://speed21-e8e5e.firebaseio.com\",\n    projectId: \"speed21-e8e5e\",\n    storageBucket: \"\",\n    messagingSenderId: \"115481071811\",\n    appId: \"1:115481071811:web:1ab533efc606a713061276\"\n\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\n\nconst Header = (props) => {\n    return (\n    <header className=\"Header\">\n        <h1>Speed 21</h1>\n        <label htmlFor=\"mainInput\" className=\"sr-only\">Enter Your Name</label>\n        <input name=\"mainInput\" type=\"text\" id=\"playerName\"  value={props.tracking} onChange={props.trackingChanges} placeholder=\"Enter Your Name\" />\n        <div className=\"startButtons\">\n            <button onClick={props.startClicked}> Start</button>\n            <button onClick={props.instructionsClicked}> How?</button>\n        </div>\n      </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\n\nconst Gameover = (props) => {\n    return (\n        <div className=\"gameover\">\n            <h2>GAME OVER</h2>\n            <p>Hi {props.userInput}!, Your got {props.bbla}$ left in your Bank 👑 </p>\n            <button onClick={props.playAgainButton} className=\"tryAgain\"> Again?</button>\n            <ol className=\"leaderboard\">\n            <h3>♠-----High Scores-----♥</h3>\n              {props.leaderboard.map((value, key)=>{\n                return (\n                  <li key={key}>{value}  $</li>             )\n              })}\n            </ol>\n        </div>\n    )\n}\n\n\nexport default Gameover;","import React from 'react';\n\n\nconst Instructions = (props) => {\n    return (\n        <div className=\"instructions\">\n          <h3>Instructions</h3>\n          <ul>\n            <li> Speed 21 starts with players making bets (You will get 500$ when starting).</li>\n            <li>Dealer deals 2 cards to the player and 1 to himself</li>\n            <li>Blackjack card values:All cards count their face value in blackjack. Picture cards count as 10 and the ace can count as either 1 or 11.</li>\n            <li> Card suits have no meaning in blackjack. The total of any hand is the sum of the card values in the hand.</li>\n            <li>Players must decide whether to stand or hit</li>\n            <li>The dealer acts last and must hit higher than the user up to 21</li>\n            <li>Players win when their hand totals higher than dealer’s hand, or they have 21</li>\n            <li>Grow your bank as big as possible in 2 minutes</li>\n          </ul>\n          <button onClick={props.exitInstructions} >Back</button>\n        </div>\n    )\n}\n\n\nexport default Instructions;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport firebase from './components/firebase';\nimport Header from './components/Header';\nimport Gameover from './components/Gameover';\nimport Instructions from './components/Instructions'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      gameStart: false,\n      deckId: \"\",\n      userdeckValue: 0,\n      dealerdeckValue: 0,\n      userHandUrls: [],\n      dealerHandUrls:[],\n      userAceCounter:0,\n      dealerAceCounter:0,\n      gameEnd: false,\n      timer: 120,\n      gameOver: false,\n      leaderboard:[],\n      userInput: \"\",\n      userWon: false,\n      dealerWon: false,\n      tie:false,\n      stay:false,\n      bet:false,\n      bank:500,\n      amountToBet: 0,\n      instructions:false\n    }\n  }\n\n  // This will give us a brand new deck\n  newDeck =() => {\n    axios({\n      method: 'get',\n      url:'https://deckofcardsapi.com/api/deck/new/shuffle/',\n      responseType: 'json',\n      params:{\n        deck_count :1\n      }\n    }).then((res)=>{\n      \n      this.setState({\n       deckId: res.data.deck_id\n      })\n      this.initialDealer(res.data.deck_id);\n      this.initialUser(res.data.deck_id) \n    }).catch(function() {\n      alert('The card API is not working at the time maybe try to go to a Real Casino:)');\n    }) ;\n  }\n// This will give  1 card to the dealer\n  initialDealer =(id) => {\n    axios({\n      method: 'get',\n      url:`https://deckofcardsapi.com/api/deck/${id}/draw/`,\n      responseType: 'json',\n      params:{\n        count:1\n      }\n    }).then((res)=>{\n      let dealerCard1 = res.data.cards[0].value;\n      this.pushDealerUrl(res.data.cards[0].image);\n      dealerCard1 = parseInt(this.dealerFilterCard(dealerCard1))\n      this.setState({\n        dealerdeckValue: this.dealerFilterCard(dealerCard1)\n      })\n    }).catch(function() {\n      alert('The card API is not working at the time maybe try to go to a Real Casino:)');\n    })\n  }\n// this will give the initial 2 cards to the user\n  initialUser =(id) => {\n    axios({\n      method: 'get',\n      url:`https://deckofcardsapi.com/api/deck/${id}/draw/`,\n      responseType: 'json',\n      params:{\n        count:2\n      }\n    }).then((res)=>{\n      let userCard1 = res.data.cards[0].value;\n      let userCard2 = res.data.cards[1].value;\n      this.pushUserUrl(res.data.cards[0].image);\n      this.pushUserUrl(res.data.cards[1].image);\n      userCard1 = parseInt(this.userFilterCard(userCard1));\n      userCard2 = parseInt(this.userFilterCard(userCard2));\n      this.setState({\n        userdeckValue: userCard1 + userCard2\n      })\n      if(this.state.userdeckValue ===21){\n        this.stay()\n      }\n    }).catch(function() {\n      alert('The card API is not working at the time maybe try to go to a Real Casino:)');\n    });\n  }\n// this will convert J,Q,K & A to numerial values and also will keep track of the dealer A's\n  dealerFilterCard = (value) => {\n    if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n      return 10\n    }\n    else if (value=== \"ACE\") {\n      this.setState({\n        dealerAceCounter: this.state.dealerAceCounter + 10\n      });\n      return 11\n    }\n    else return value\n  }\n\n// this will convert J,Q,K & A to numerial values and also will keep track of the user A's\n  userFilterCard = (value) => {\n    if (value === \"QUEEN\" || value === \"KING\" || value === \"JACK\") {\n      return 10\n    }\n    else if (value=== \"ACE\") {\n      this.setState({\n        userAceCounter: this.state.userAceCounter + 10\n      });\n      return 11\n    }\n    else return value\n  }\n// grabing url for  user cards\n  pushUserUrl = (url) => {\n    const newpush = [...this.state.userHandUrls]\n    newpush.push(url)\n    this.setState({\n      userHandUrls : newpush\n    })\n  }\n\n// grabing url for  dealer cards\n  pushDealerUrl = (url) => {\n    const newpush = [...this.state.dealerHandUrls]\n    newpush.push(url)\n    this.setState({\n      dealerHandUrls : newpush\n    })\n  }\n\n// user request an extra card\n  userRequestCard = (id) => {\n    if(this.state.userdeckValue ===21){\n      this.stay()\n    }\n    else {\n    axios({\n      method: 'get',\n      url:`https://deckofcardsapi.com/api/deck/${id}/draw/`,\n      responseType: 'json',\n      params:{\n        count:1\n      }\n      }).then((res)=>{\n        let userCard1 = res.data.cards[0].value;\n        this.pushUserUrl(res.data.cards[0].image);\n        userCard1 = parseInt(this.userFilterCard(userCard1));\n        this.setState({\n          userdeckValue: this.state.userdeckValue +  userCard1\n        })\n        this.checkuser()\n      }).catch(function() {\n        alert('The card API is not working at the time maybe try to go to a Real Casino:)');\n      }); \n    }\n  }\n// dealer request an extra card\n  dealerRequestCard = (id) => {\n    if (this.state.gameEnd === false) {\n      axios({\n        method: 'get',\n        url:`https://deckofcardsapi.com/api/deck/${id}/draw/`,\n        responseType: 'json',\n        params:{\n          count:1\n        }\n      }).then((res)=>{\n        let dealerCard1 = res.data.cards[0].value;\n        this.pushDealerUrl(res.data.cards[0].image);\n        dealerCard1 = parseInt(this.dealerFilterCard(dealerCard1));\n        this.setState({\n          dealerdeckValue: this.state.dealerdeckValue +  dealerCard1\n        })\n        if(this.state.dealerdeckValue < this.state.userdeckValue && this.state.dealerdeckValue < 21) {\n          this.dealerRequestCard(this.state.deckId);\n        }\n        else {\n          this.checkdealer();\n        }\n      }).catch(function() {\n        alert('The card API is not working at the time maybe try to go to a Real Casino:)');\n      }) \n    }\n  }\n\n  // checking if user has gone over 21\n  checkuser = () => {\n    if(this.state.userdeckValue >21) {\n      if(this.state.userAceCounter > 0) {\n        this.setState({\n          userdeckValue: this.state.userdeckValue - this.state.userAceCounter,\n          userAceCounter: 0\n        })\n        this.checkuser();\n      }\n      else {\n      this.setState({\n        bank: this.state.bank - this.state.amountToBet,\n        gameEnd: true,\n        dealerWon:true,\n        amountToBet:0\n      })\n      }\n    }\n    else if(this.state.userdeckValue ===21 && this.state.dealerdeckValue < 21){\n      this.checkdealer();\n    }\n  }\n\n  // checking if dealer won\n  checkdealer =() => {\n    if(this.state.dealerdeckValue >21) {\n      if(this.state.dealerAceCounter > 0) {\n        this.setState({\n          dealerdeckValue: this.state.dealerdeckValue - this.state.dealerAceCounter,\n          dealerAceCounter: 0\n        })\n        this.checkdealer();\n      }\n      else {\n        this.setState({\n          bank: parseInt(this.state.bank) + parseInt(this.state.amountToBet),\n          gameEnd: true,\n          userWon: true,\n          amountToBet:0\n        })\n      }\n    }\n    else if(this.state.dealerdeckValue === 21 && this.state.userdeckValue === 21) {\n      this.setState({\n        gameEnd: true,\n        tie: true\n      })\n    }\n    else if(this.state.dealerdeckValue === this.state.userdeckValue) {\n      this.setState({\n        gameEnd: true,\n        tie: true\n      })\n    }\n    else if(this.state.dealerdeckValue === this.state.userdeckValue) {\n      this.setState({\n        gameEnd: true,\n        tie:false\n      })\n    }\n    else if (this.state.dealerdeckValue > this.state.userdeckValue){\n      this.setState({\n        bank: this.state.bank - this.state.amountToBet,\n        gameEnd: true,\n        dealerWon: true,\n        amountToBet:0\n      })\n    }\n\n    else if(this.state.dealerdeckValue < this.state.userdeckValue && this.state.dealerdeckValue <22 && this.state.userdeckValue < 22) {\n      this.dealerRequestCard(this.state.deckId)\n    }\n  }\n\n  // when user clicks the start button\n  startButton = () => {\n    if (this.state.userInput ===\"\") {\n      this.setState({\n        userInput: 'Guest'\n      })\n    }\n    this.setState({\n      gameStart: true,\n      bet:true\n    })\n    this.startTimer();\n  }\n\n  // when user clicks stay\n  stay = () => {\n    this.setState({\n      stay: true\n    })\n    if(this.state.userdeckValue ===21){\n      this.checkuser();\n    }\n    else{\n      this.checkuser();\n      this.dealerRequestCard(this.state.deckId)\n    }\n  }\n// timer function\n  timerOn = () => {\n    if (this.state.timer > 0 ) {\n      this.setState({\n        timer : this.state.timer - 1\n      })\n    }\n    else if (this.state.timer === 0) {\n      this.gameisOver();\n      this.setState({\n        gameOver : true,\n        timer : this.state.timer - 0.01\n      })\n    }\n    else {\n\n    }\n  }\n// start timer\n  startTimer = () => {\n    setInterval(this.timerOn ,1000); \n  }\n// when user advance to enxt game\n  nextGame = () => {\n    if(this.state.bank <1) {\n      this.setState({\n        timer:0,\n        gameisOver:true\n      })\n    }\n    else {\n    this.setState({\n      stay:false,\n      gameEnd: false,\n      userdeckValue: 0,\n      dealerdeckValue: 0,\n      userAceCounter:0,\n      dealerAceCounter:0,\n      userHandUrls: [],\n      dealerHandUrls:[],\n      tie:false,\n      dealerWon: false,\n      userWon:false,\n      bet:true\n    })\n  }\n  }\n// keep track of user name\n  inputChange = (event) => {\n    this.setState({userInput: event.target.value})\n  }\n// keeps track of amount bet\n  updateInputValue =(evt) => {\n    this.setState({\n      amountToBet: evt.target.value\n    });\n  }\n// time is over or bank is over\n  gameisOver = () => {\n    this.setState({\n      bet:false\n    })\n      const dbRef = firebase.database().ref();\n      const userFb= [this.state.userInput,' : ',this.state.bank]\n      dbRef.push(userFb);\n      dbRef.on('value', (response) => {\n        const newFbState = [];\n        const data =response.val();\n        for (let item in data) {\n          newFbState.push(data[item])\n        }\n        const sortedArray = newFbState.sort((a, b) =>  b[2] - a[2]);\n        const topTenArray = sortedArray.slice(0,10);\n        this.setState ({\n          leaderboard: topTenArray,\n        })\n      });\n  }\n// play again button\n  playAgain = () => {\n    this.setState({\n      deckId: \"\",\n      userdeckValue: 0,\n      dealerdeckValue: 0,\n      userHandUrls: [],\n      dealerHandUrls:[],\n      userAceCounter:0,\n      dealerAceCounter:0,\n      userScore:0,\n      houseScore:0,\n      totalScore:0,\n      gameEnd: false,\n      timer: 100,\n      gameOver: false,\n      leaderboard:[],\n      userWon: false,\n      dealerWon: false,\n      tie:false,\n      stay:false,\n      bank:500,\n      bet:true\n    })\n  }\n// bet functions\n  startBet =() => {\n    this.setState({\n      bet:true\n    })\n  }\n  placeBet =() => {\n    if(this.state.amountToBet > this.state.bank) {\n      this.setState({\n        amountToBet: this.state.bank\n      })\n    }\n    else if (this.state.amountToBet < 1) {\n      this.setState({\n        amountToBet: 1\n      })\n    }\n    this.setState({\n      stay:false,\n      gameEnd: false,\n      userdeckValue: 0,\n      dealerdeckValue: 0,\n      userAceCounter:0,\n      dealerAceCounter:0,\n      userHandUrls: [],\n      dealerHandUrls:[],\n      tie:false,\n      dealerWon: false,\n      userWon:false,\n      bet:false\n    });\n\n    this.newDeck();\n  }\n// instructions button pressed\n  instructionsButton = () => {\n    this.setState({\n      instructions:true\n    })\n  }\n// exit instructions\n  backInstructionsButton = () => {\n    this.setState({\n      instructions:false\n    })\n  }\n\n// render\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {this.state.gameStart === false && this.state.gameOver === false && this.state.instructions === false &&\n        <Header tracking={this.state.userInput} trackingChanges={this.inputChange} startClicked={this.startButton}\n        instructionsClicked={this.instructionsButton}/> \n        }\n        {this.state.gameStart === false && this.state.gameOver === false && this.state.instructions &&\n          <Instructions exitInstructions={this.backInstructionsButton}/>\n        }\n        <div className=\"playing\">\n          {this.state.gameStart && this.state.gameOver === false &&\n          <div className=\"gameBoard\">\n            <div className=\"globalNav\">\n              <div className=\"announcement\">\n                {this.state.userWon && this.state.gameEnd && this.state.gameOver ===false && <p>User Win!</p>}\n                {this.state.dealerWon && this.state.gameEnd &&this.state.gameOver ===false &&<p>Dealer Win!</p>}\n                {this.state.tie && this.state.gameEnd && this.state.gameOver ===false&&<p>TIE!</p>}\n              </div>\n              <nav>\n                <div>\n                  <p>{this.state.timer}s</p>\n                </div>\n                <div>\n                  <p>Bank: {this.state.bank}</p>\n                </div>\n              </nav>\n            </div>\n            {this.state.gameStart && this.state.gameOver === false && this.state.gameEnd === false && this.state.stay === false && this.state.bet &&<div className=\"betDiv\">\n              <h3>Place your bet quickly!</h3>\n              <div className=\"number\">\n                <label htmlFor=\"numInput\" className=\"sr-only\">Enter Your amount to bet</label>\n                <input type=\"number\" min=\"0\" placeholder=\"$100\" max={this.state.bank} step=\"50\" value={this.state.inputValue} onChange={this.updateInputValue}/>\n                <button onClick={()=>{this.placeBet()}}>Bet</button>\n              </div>\n            </div>\n            }\n            { this.state.gameStart && this.state.gameOver === false && this.state.bet ===false &&\n              <div className=\"cards\">\n                <div className=\"dealerHand\">\n                {this.state.dealerHandUrls.map((url,key)=>{\n                    return (\n                      <figure>\n                        <img src={url} key={key} alt=\"poker card\" /> \n                      </figure>            )\n                  })}\n                </div>\n                <div className=\"userHand\">\n                  {this.state.userHandUrls.map((url,key)=>{\n                    return (\n                      <figure>\n                        <img src={url} key={key} alt=\"poker card\"/> \n                      </figure>            )\n                  })}\n                </div>\n              </div>\n            }\n            {this.state.gameStart && this.state.gameOver === false && this.state.gameEnd === false && this.state.stay === false && this.state.bet===false &&\n            <div className=\"buttonsBoard\">\n              <button className=\"buttonStay\" onClick={()=>{this.stay()}}>Stay</button>\n              <h3>{this.state.userInput}</h3>\n              <button className=\"buttonHit\" onClick={()=>{this.userRequestCard(this.state.deckId)}}>Hit</button>\n            </div>\n            }\n            {\n              this.state.gameEnd && this.state.gameOver === false  && \n              <div className=\"buttonsBoard\">\n                <div> \n                  <button onClick={this.nextGame} className=\"next\"> Next</button>\n                </div> \n              </div>\n            }           \n          </div>\n          }\n        </div>\n        {\n          this.state.gameOver && \n          <Gameover userInput={this.state.userInput} bbla={this.state.bank} playAgainButton={this.playAgain} leaderboard={this.state.leaderboard}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}